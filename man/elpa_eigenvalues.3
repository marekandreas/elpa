.TH "elpa_eigenvalues" 3 "Thu Nov 28 2024" "ELPA" \" -*- nroff -*-
.ad l
.nh
.ss 12 0
.SH NAME
elpa_eigenvalues \- computes all eigenvalues \(*l for a real symmetric or complex hermitian eigenproblem: A*Q = \(*l*Q
.sp
There are also variations of this routine that can accept not only host but also device pointers as input/output. 
Names of these routines explicitly contain the corresponding datatypes:
elpa_eigenvalues_double,
elpa_eigenvalues_float,
elpa_eigenvalues_double_complex,
elpa_eigenvalues_float_complex.

.SH SYNOPSIS
.br
.SS FORTRAN INTERFACE
use elpa
.br
class(elpa_t), pointer :: elpa_handle
.br

call elpa_handle%\fBeigenvalues\fP (a, ev, error)
.sp
With the definitions of the input and output variables:

.TP
class(elpa_t) ::\fB elpa_handle\fP
An instance of the ELPA object.
.TP
datatype ::\fB a \fP
The local part of matrix A for which the eigenvalues should be computed.
The dimensions of matrix\fB a\fP must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3). The\fB datatype\fP of the matrix can be one of "real(kind=c_double)", "real(kind=c_float)", "complex(kind=c_double)", or "complex(kind=c_float)".
The global matrix has to be symmetric or hermitian, this is not checked by the routine.
.TP
datatype_real ::\fB ev\fP
The global array where the eigenvalues \(*l will be stored in\fI ascending\fP order.
The\fB datatype_real\fP of\fB ev\fP can be either "real(kind=c_double)" or "real(kind=c_float)", depending of the\fB datatype\fP of the matrix.
Note that complex hermitian matrices also have real eigenvalues.
.TP
integer, optional ::\fB error\fP
The return error code of the function. Should be "ELPA_OK". The error code can be queried with the function\fB elpa_strerr\fP(3)

.br
.SS C/C++ INTERFACE
#include <elpa/elpa.h>
.br
elpa_t elpa_handle;

.br
void\fB elpa_eigenvalues\fP(\fBelpa_t\fP elpa_handle,\fB datatype\fP *a,\fB datatype_real\fP *ev,\fB int\fP *error);
.sp
With the definitions of the input and output variables:

.TP
elpa_t \fB elpa_handle\fP;
The handle to the ELPA object
.TP
datatype \fB *a\fP;
The local part of matrix A for which the eigenvalues should be computed.
The dimensions of the matrix must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP can be one of "double", "float", "double complex"/"std::complex<double>", "float complex"/"std::complex<float>" for C/C++.
The global matrix has to be symmetric or hermitian, this is not checked by the routine.
.TP
datatype_real \fB *ev\fP;
The global array where the eigenvalues \(*l will be stored in\fI ascending\fP order.
The\fB datatype_real\fP of the vector\fB ev\fP can be either "double" or "float", depending of the\fB datatype\fP of the matrix.
Note that complex hermitian matrices also have real eigenvalues.
.TP
int \fB *error\fP;
The error code of the function. Should be "ELPA_OK". The error codes can be queried with\fB elpa_strerr\fP(3)

.SH DESCRIPTION
Computes the eigenvalues of a real symmetric or complex hermitian matrix.
The functions\fB elpa_init\fP(3),\fB elpa_allocate\fP(3),\fB elpa_set\fP(3), and\fB elpa_setup\fP(3) must be called\fI BEFORE\fP\fB elpa_eigenvalues\fP can be called.

.SH SEE ALSO
\fBelpa2_print_kernels\fP(1)\fB elpa_init\fP(3)\fB elpa_allocate\fP(3)\fB elpa_set\fP(3)\fB elpa_setup\fP(3)\fB elpa_strerr\fP(3)\fB elpa_skew_eigenvalues\fP(3)\fB elpa_eigenvectors\fP(3)\fB elpa_skew_eigenvectors\fP(3)\fB elpa_cholesky\fP(3)\fB elpa_invert_triangular\fP(3)\fB elpa_solve_tridiagonal\fP(3)\fB elpa_eigenvalues\fP(3)\fB elpa_uninit\fP(3)\fB elpa_deallocate\fP(3)
