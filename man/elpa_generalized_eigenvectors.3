.TH "elpa_generalized_eigenvectors" 3 "Thu Nov 28 2024" "ELPA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
elpa_generalized_eigenvectors \- computes all eigenvalues and (part of) eigenvectors of a generalized eigenvalue problem, A*X=lambda*B*X,
for real symmetric or complex hermitian matrices
.sp
There are also variations of this routine that can accept not only host but also device pointers as input/output. 
Names of these routines explicitly contain the corresponding datatypes:
elpa_generalized_eigenvectors_double,
elpa_generalized_eigenvectors_float,
elpa_generalized_eigenvectors_double_complex,
elpa_generalized_eigenvectors_float_complex.
.br

.SH SYNOPSIS
.br
.SS FORTRAN INTERFACE
use elpa
.br
class(elpa_t), pointer :: elpa_handle
.br

call elpa_handle%\fBgeneralized_eigenvectors\fP (a, b, ev, q, is_already_decomposed, error)
.sp
With the definitions of the input and output variables:

.TP
class(elpa_t) :: \fB elpa_handle\fP
An instance of the ELPA object.
.TP
datatype :: \fB a\fP
The local matrix\fB a\fP for which the eigenvalues and eigenvalues should be computed.
The dimensions of matrix\fB a\fP must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP of the matrix can be one of "real(kind=c_double)", "real(kind=c_float)", "complex(kind=c_double)", or "complex(kind=c_float)
.TP
datatype :: \fB b\fP
The local matrix\fB b\fP defining the generalized eigenvalue problem.
The dimensions and datatype of the matrix\fB b\fP has to be the same as for matrix\fB a\fP.
.TP
datatype :: \fB ev\fP
The vector\fB ev\fP where the eigenvalues will be stored in\fI ascending\fP order.
The\fB datatype\fP of the vector\fB ev\fP can be either "real(kind=c_double)" or "real(kind=c_float)", depending of the\fB datatype\fP of the matrix.
Note that complex hermitian matrices also have real-valued eigenvalues.
.TP
datatype :: \fB q\fP
The storage space for the computed eigenvectors.
The number of requested eigenvectors, nev, must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP of the matrix can be one of "real(kind=c_double)", "real(kind=c_float)", "complex(kind=c_double)", or "complex(kind=c_float)".
.TP
logical :: \fB is_already_decomposed\fP
Has to be set to .false. for the first call with a given\fB b\fP and to .true. for each subsequent call with the same\fB b\fP,
since\fB b\fP then already contains decomposition and thus the decomposing step is skipped.

.TP
integer, optional :: \fB error\fP
The return error code of the function. Should be "ELPA_OK". The error code can be queried with the function\fB elpa_strerr\fP(3)

.br
.SS C/C++ INTERFACE
#include <elpa/elpa.h>
.br
elpa_t elpa_handle;

.br
void\fB elpa_generalized_eigenvectors\fP(\fBelpa_t\fP elpa_handle,\fB datatype\fP *a,\fB datatype\fP *b,\fB datatype\fP *ev,\fB datatype\fP *q, \fB int\fP is_already_decomposed,\fB int\fP *error);
.sp
With the definitions of the input and output variables:

.TP
elpa_t \fB elpa_handle\fP;
The handle to the ELPA object
.TP
datatype \fB *a\fP;
The local matrix\fB a\fP for which all eigenvalues and (part of) eigenvectors should be computed.
The dimensions of the matrix must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The matrix has to be symmetric or hermitian, this is not checked by the routine.
The\fB datatype\fP can be one of "double", "float", "double complex"/"std::complex<double>", "float complex"/"std::complex<float>" for C/C++.
.TP
datatype \fB *b\fP;
The local matrix\fB b\fP defining the generalized eigenvalue problem.
The dimensions and the\fB datatype\fP of the matrix\fB b\fP must be the same as matrix\fB a\fP.
The matrix has to be symmetric or hermitian, this is not checked by the routine.
The\fB datatype\fP can be one of "double", "float", "double complex"/"std::complex<double>", "float complex"/"std::complex<float>" for C/C++.
.TP
datatype \fB *ev\fP;
The storage for the computed eigenvalues.
Eigenvalues will be stored in\fI ascending\fP order.
The\fB datatype\fP can be either "double" or "float".
Note that the eigenvalues of complex hermitian matrices are also real.
.TP
datatype \fB *q\fP;
The storage space for the computed eigenvectors.
The number of requested eigenvectors must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP can be one of "double", "float", "double complex"/"std::complex<double>", "float complex"/"std::complex<float>" for C/C++.
.TP
int \fB is_already_decomposed\fP;
Has to be set to 0 for the first call with a given\fB b\fP and 1 for each subsequent call with the same\fB b\fP,
since\fB b\fP then already contains decomposition and thus the decomposing step is skipped.
.TP
int \fB *error\fP;
The error code of the function. Should be "ELPA_OK". The error codes can be queried with\fB elpa_strerr\fP(3).

.SH DESCRIPTION
Computes the generalized eigenvalues and (part of) the generalized eigenvectors for a real symmetric or complex hermitian generalized eigenproblem.
The functions\fB elpa_init\fP(3),\fB elpa_allocate\fP(3),\fB elpa_set\fP(3), and\fB elpa_setup\fP(3) must be called\fI BEFORE\fP\fB elpa_generalized_eigenvalues\fP can be called. In particular, the number of eigenvectors to be computed, nev, can be set with\fB elpa_set\fP(3). Unlike in the case of ordinary eigenvalue problem, the generalized problem calls some external ScaLAPACK routines. The user is responsible for initialization of the BLACS context, which then has to be passed to ELPA by\fB elpa_set\fP(3)\fI BEFORE\fP\fB elpa_generalized_eigenvalues\fP can be called.

.SH SEE ALSO
\fB elpa_init\fP(3)\fB elpa_allocate\fP(3)\fB elpa_set\fP(3)\fB elpa_setup\fP(3)\fB elpa_strerr\fP(3)\fB elpa_eigenvalues\fP(3)\fB elpa_eigenvectors\fP(3)\fB elpa_cholesky\fP(3)\fB elpa_invert_triangular\fP(3)\fB elpa_solve_tridiagonal\fP(3)\fB elpa_hermitian_multiply\fP(3) \fB elpa_uninit\fP(3)\fB elpa_deallocate\fP(3)
