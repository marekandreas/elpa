.TH "elpa_pxgemm_multiply_float" 3 "Thu Nov 28 2024" "ELPA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
elpa_pxgemm_multiply_float \- performs multiplication of two block-cyclic distributed matrices C = op(A)*op(B)
.sp
\fBTHIS IS AN EXPERIMENTAL ROUTINE\fP. FOR NOW ONLY SQUARE MATRICES \fB(ncb=elpa_handle%na)\fP, HAVING THE SAME BLOCK-CYCLIC DISTRIBUTION \fB(nrows_b=nrows_c=elpa_handle%local_nrows, ncols_b=ncols_c=elpa_handle%local_ncols)\fP ARE SUPPORTED. USE WITH CARE.

.SH SYNOPSIS
.br
.SS FORTRAN INTERFACE
use elpa
.br
class(elpa_t), pointer :: elpa_handle
.br

call elpa%\fBpxgemm_multiply_float\fP (trans_a, trans_b, ncb, a, b, nrows_b, ncols_b, c, nrows_c, ncols_c, error)
.sp
With the definitions of the input and output variables:
.TP
class(elpa_t) :: \fB elpa\fP
An instance of the ELPA object.
.TP
character*1   :: \fB trans_a\fP
Should be set 
to 'N' if A is non-transposed: op(A) = A; 
to 'T' if A is transposed: op(A) = A**T; 
to 'H' if A is conjugate-transposed: op(A) = A**H.
.TP
character*1   :: \fB trans_b\fP
Should be set 
to 'N' if B is non-transposed: op(B) = B; 
to 'T' if B is transposed: op(B) = B**T; 
to 'H' if B is conjugate-transposed: op(B) = B**H.
.TP
integer       :: \fB ncb\fP
The number of columns of the global matrices\fB B\fP and\fB C\fP.
.TP
datatype      :: \fB a\fP
The host/device local matrix\fB a\fP.
The local dimensions of matrix\fB a\fP (elpa_handle%local_nrows, elpa_handle%local_ncols) as well as the corresponding global dimensions (elpa_handle%na, elpa_handle%na) must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP of the matrix must be "real(kind=c_float)".
In case of a GPU build\fB a\fP can be a device pointer to a local matrix\fB a\fP in the device memory.
.TP
datatype      :: \fB b\fP
The host/device local matrix\fB b\fP.
The local matrix\fB b\fP. The local dimensions of the matrix are specified by the parameters\fB nrows_b\fP and\fB ncols_b\fP.
The\fB datatype\fP of the matrix must be "real(kind=c_float)".
In case of a GPU build\fB b\fP can be a device pointer to a local matrix\fB b\fP in the device memory.
.TP
integer       :: \fB nrows_b\fP
The local number of rows of matrix\fB b\fP.
.TP
integer       :: \fB ncols_b\fP
The local number of columns of matrix\fB b\fP.
.TP
datatype      :: \fB c\fP
The host/device local matrix\fB c\fP.
The local dimensions of the matrix are specified by the parameters\fB nrows_c\fP and\fB ncols_c\fP.
The\fB datatype\fP of the matrix must be "real(kind=c_float)".
In case of a GPU build\fB c\fP can be a device pointer to a local matrix\fB c\fP in the device memory.
.TP
integer       :: \fB nrows_c\fP
The local number of rows of matrix\fB c\fP.
.TP
integer       :: \fB ncols_c\fP
The local number of columns of matrix\fB c\fP.
.TP
integer, optional :: \fB error\fP
The return error code of the function. Should be "ELPA_OK". The error code can be queried with the function\fB elpa_strerr\fP(3)

.br
.SS C INTERFACE
#include <elpa/elpa.h>
.br
elpa_t elpa_handle;

.br
void\fB elpa_pxgemm_multiply_float\fP(\fBelpa_t\fP elpa_handle,\fB char\fP trans_a,\fB char\fP trans_b,\fB int\fP ncb,\fB datatype\fP *a,\fB datatype\fP *b,\fB int\fP nrows_b,\fB int\fP ncols_b,\fB datatype\fP *c,\fB int\fP nrows_c,\fB int\fP ncols_c,\fB int\fP *error);
.sp
With the definitions of the input and output variables:

.TP
elpa_t \fB elpa_handle\fP;
The handle to the ELPA object
.TP
char \fB trans_a\fP;
Should be set 
to 'N' if A is non-transposed: op(A) = A; 
to 'T' if A is transposed: op(A) = A**T; 
to 'H' if A is conjugate-transposed: op(A) = A**H.
.TP
char \fB trans_b\fP;
Should be set 
to 'N' if B is non-transposed: op(B) = B; 
to 'T' if B is transposed: op(B) = B**T; 
to 'H' if B is conjugate-transposed: op(B) = B**H.
.TP
int \fB ncb\fP;
The number of columns of the global matrices\fB B\fP and \fB C\fP.
.TP
datatype \fB *a\fP;
The host/device local matrix\fB a\fP.
The local dimensions of matrix\fB a\fP (local_nrows, local_ncols) as well as the corresponding global dimensions (na, na) must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP must be "float".
In case of a GPU build\fB a\fP can be a device pointer to a local matrix\fB a\fP in the device memory.
.TP
datatype \fB *b\fP;
The host/device local matrix\fB b\fP.
The local dimensions of the matrix are specified by the parameters\fB nrows_b\fP and\fB ncols_b\fP.
The\fB datatype\fP must be "float".
In case of a GPU build\fB b\fP can be a device pointer to a matrix\fB b\fP in the device memory.
.TP
int \fB nrows_b\fP;
The local number of rows of matrix\fB b\fP.
.TP
int\fB ncols_b\fP;
The local number of columns of matrix\fB b\fP.
.TP
datatype \fB *c\fP;
The host/device local matrix\fB c\fP.
The local matrix\fB c\fP. The local dimensions of the matrix are specified by the parameters\fB nrows_c\fP and\fB ncols_c\fP.
The\fB datatype\fP must be "float".
In case of a GPU build\fB c\fP can be a device pointer to a matrix\fB c\fP in the device memory.
.TP
int \fB nrows_c\fP;
The local number of rows of matrix\fB c\fP.
.TP
int \fB ncols_c\fP;
The local number of columns of matrix\fB c\fP.
.TP
int \fB *error\fP;
The return error code of the function. Should be "ELPA_OK". The error code can be queried with the function\fB elpa_strerr\fP(3)

.SH DESCRIPTION
Performs a matrix multiplication: C = op(A)* op(B) where op(A)=A or op(A)=A**T for real float matrices.
Can use either host or device pointers for the matrices\fB a\fP, \fB b\fP, and\fB c\fP.
The functions\fB elpa_init\fP(3),\fB elpa_allocate\fP(3),\fB elpa_set\fP(3),
and\fB elpa_setup\fP(3) must be called\fI BEFORE\fP\fB elpa_pxgemm_multiply_float\fP can be called.

.SH SEE ALSO
\fBelpa2_print_kernels\fP(1)\fB elpa_init\fP(3)\fB elpa_allocate\fP(3)\fB elpa_set\fP(3)\fB elpa_setup\fP(3)\fB elpa_strerr\fP(3)\fB elpa_eigenvalues\fP(3)\fB elpa_eigenvectors\fP(3)\fB elpa_solve_tridiagonal\fP(3)\fB elpa_uninit\fP(3)\fB elpa_deallocate\fP(3)
