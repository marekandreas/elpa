.TH "elpa_set" 3 "Thu Nov 28 2024" "ELPA" \" -*- nroff -*-
.ad l
.nh
.ss 12 0
.SH NAME
elpa_set \- set a parameter for the ELPA object.
.br

.SH SYNOPSIS
.br
.SS FORTRAN INTERFACE
use elpa
.br
class(elpa_t), pointer :: elpa_handle
.br

call elpa_handle%\fBset\fP (name, value, error)
.sp
With the definitions of the input and output variables:
.sp
.TP
class(elpa_t)     ::\fB elpa\fP
An instance of the ELPA object.
.TP
character(*)      ::\fB name\fP
The name of the option to be set.
.TP
datatype          ::\fB value\fP
the value which should be assigned to the option\fB name\fP.
The\fB datatype\fP can be\fB integer\fP or\fB real(kind=c_double)\fP.
.TP
integer, optional ::\fB error\fP
The returned error code. On success it is ELPA_OK, otherwise an error. 
he error code can be queried with\fB elpa_strerr\fP(3)

.br
.SS C/C++ INTERFACE
#include <elpa/elpa.h>
.br
elpa_t elpa_handle;

.br
\fBvoid\fP\fB elpa_set\fP (\fBelpa_t\fP elpa_handle,\fB const char\fP *name,\fB datatype\fP value,\fB int\fP *error);
.sp
With the definitions of the input and output variables:

.TP
elpa_t \fB elpa_handle\fP;
The handle of an ELPA object, obtained before with\fB elpa_allocate\fP(3)
.TP
const char \fB *name\fP;
The name of the option to be set.
.TP
datatype \fB value\fP;
The value which should be assigned to the option\fB name\fP.
The\fB datatype\fP  can be either\fB int\fP or\fB double\fP.
.TP
int \fB *error\fP;
The error code of the function. Should be "ELPA_OK". The error codes can be queried with\fB elpa_strerr\fP(3)

.SH DESCRIPTION
The\fB elpa_set\fP function is used to set\fB mandatory parameters\fP and\fB runtime options\fP of the ELPA library.
It returns an error code which can be queried with\fB elpa_strerr\fP(3).

\fB Mandatory parameters:\fP

Mandatory parameters of an ELPA instance have to be set\fI BEFORE\fP the ELPA instance is set up with the function\fB elpa_setup\fP(3).

At the moment the following mandatory parameters are supported:
.TP
\fB"na"\fP:
integer parameter. The global matrix has size is (na * na)
.TP
\fB"nev"\fP:
integer parameter. The number of eigenvectors to be computed in a call to\fB elpa_eigenvectors\fP(3).
Must satisfy 1 <= nev <= na.
.TP
\fB"local_nrows"\fP:
integer parameter. Number of matrix rows stored on this MPI process.
.TP
\fB"local_ncols"\fP:
integer parameter. Number of matrix columns stored on this MPI process.
.TP
\fB"process_row"\fP:
integer parameter. Process row number in the 2D domain decomposition.
.TP
\fB"process_col"\fP:
integer parameter. Process column number in the 2D domain decomposition.
.TP
\fB"mpi_comm_parent"\fP:
integer parameter. The parent MPI communicator which includes all MPI process which are used in the 2D domain decomposition.
.TP
\fB"bandwidth"\fP:
integer parameter. Some ELPA computational steps can be accelerated if the input matrix is already in banded form.
If set, ELPA assumes that the matrix has the provided bandwidth.
.TP
\fB"BLACS_context"\fP:
integer parameter. The generalized eigenvalue solver\fB elpa_generalized_eigenvectors\fP(3) uses internal calls to some of the ScaLAPACK routines.
Thus before calling it, the user has to provide properly initialized BLACS context.
.TP
\fB"timings"\fP:
integer parameter. Choose whether time measurements should be done in the ELPA routines (1) or not (0).

.LP
\fB Runtime options:\fP

Runtime options of an ELPA option can be set at\fI any time\fP.

Here are some suuported runtime options:
.TP
\fB"solver"\fP:
Choose which solver should be used in the compute steps\fB elpa_eigenvalues\fP(3) or\fB elpa_eigenvectors\fP(3).
At the moment allowed option are \fB"ELPA_SOLVER_1STAGE"\fP or \fB"ELPA_SOLVER_2STAGE"\fP.
.TP
\fB"real_kernel"\fP:
Choose which real kernel should be used in the\fB elpa_eigenvalues\fP(3) or\fB elpa_eigenvectors\fP(3) compute steps,
if solver is set to \fB"ELPA_SOLVER_2STAGE"\fP.
The available kernels can be queried with\fB elpa2_print_kernels\fP(1).
.TP
\fB"complex_kernel"\fP:
Choose which complex kernel should be used in the\fB elpa_eigenvalues\fP(3) or\fB elpa_eigenvectors\fP(3) compute steps,
if solver is set to \fB"ELPA_SOLVER_2STAGE"\fP.
The available kernels can be queried with\fB elpa2_print_kernels\fP(1).
.TP
\fB"qr"\fP:
Choose whether a QR decomposition should be used for the real case computations in\fB elpa_eigenvalues\fP(3) or\fB elpa_eigenvectors\fP(3) computational steps,
if solver was set to \fB"ELPA_SOLVER_2STAGE"\fP.
.TP
\fB"debug"\fP:
Choose whether, in case of an error, more debug information should be provided.

The full list of supported options can found in the ELPA documentation.

.SH SEE ALSO
\fBelpa2_print_kernels\fP(1)\fB elpa_init\fP(3)\fB elpa_allocate\fP(3)\fB elpa_setup\fP(3)\fB elpa_strerr\fP(3)\fB elpa_eigenvalues\fP(3)\fB elpa_eigenvectors\fP(3)\fB elpa_cholesky\fP(3)\fB elpa_invert_triangular\fP(3)\fB elpa_solve_tridiagonal\fP(3)\fB elpa_hermitian_multiply\fP(3)\fB elpa_deallocate\fP(3)\fB elpa_uninit\fP(3)
